#pragma once

#ifndef FTD2XX_EXPORTS
#define FTD2XX_EXPORTS
#endif

#include <ftd2xx.h>

typedef void(WINAPI *t_FT_Initialize)(void);
typedef void(WINAPI *t_FT_Finalise)(void);
typedef FT_STATUS(WINAPI *t_FT_Open)(int deviceNumber, FT_HANDLE *pHandle);
typedef FT_STATUS(WINAPI *t_FT_OpenEx)(PVOID pArg1, DWORD Flags, FT_HANDLE *pHandle);
typedef FT_STATUS(WINAPI *t_FT_ListDevices)(PVOID pArg1, PVOID pArg2, DWORD Flags);
typedef FT_STATUS(WINAPI *t_FT_Close)(FT_HANDLE ftHandle);
typedef FT_STATUS(WINAPI *t_FT_Read)(FT_HANDLE ftHandle, LPVOID lpBuffer, DWORD dwBytesToRead, LPDWORD lpBytesReturned);
typedef FT_STATUS(WINAPI *t_FT_Write)(FT_HANDLE ftHandle, LPVOID lpBuffer, DWORD dwBytesToWrite, LPDWORD lpBytesWritten);
typedef FT_STATUS(WINAPI *t_FT_IoCtl)(FT_HANDLE ftHandle, DWORD dwIoControlCode, LPVOID lpInBuf, DWORD nInBufSize, LPVOID lpOutBuf, DWORD nOutBufSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped);
typedef FT_STATUS(WINAPI *t_FT_SetBaudRate)(FT_HANDLE ftHandle, ULONG BaudRate);
typedef FT_STATUS(WINAPI *t_FT_SetDivisor)(FT_HANDLE ftHandle, USHORT Divisor);
typedef FT_STATUS(WINAPI *t_FT_SetDataCharacteristics)(FT_HANDLE ftHandle, UCHAR WordLength, UCHAR StopBits, UCHAR Parity);
typedef FT_STATUS(WINAPI *t_FT_SetFlowControl)(FT_HANDLE ftHandle, USHORT FlowControl, UCHAR XonChar, UCHAR XoffChar);
typedef FT_STATUS(WINAPI *t_FT_ResetDevice)(FT_HANDLE ftHandle);
typedef FT_STATUS(WINAPI *t_FT_SetDtr)(FT_HANDLE ftHandle);
typedef FT_STATUS(WINAPI *t_FT_ClrDtr)(FT_HANDLE ftHandle);
typedef FT_STATUS(WINAPI *t_FT_SetRts)(FT_HANDLE ftHandle);
typedef FT_STATUS(WINAPI *t_FT_ClrRts)(FT_HANDLE ftHandle);
typedef FT_STATUS(WINAPI *t_FT_GetModemStatus)(FT_HANDLE ftHandle, ULONG *pModemStatus);
typedef FT_STATUS(WINAPI *t_FT_SetChars)(FT_HANDLE ftHandle, UCHAR EventChar, UCHAR EventCharEnabled, UCHAR ErrorChar, UCHAR ErrorCharEnabled);
typedef FT_STATUS(WINAPI *t_FT_Purge)(FT_HANDLE ftHandle, ULONG Mask);
typedef FT_STATUS(WINAPI *t_FT_SetTimeouts)(FT_HANDLE ftHandle, ULONG ReadTimeout, ULONG WriteTimeout);
typedef FT_STATUS(WINAPI *t_FT_GetQueueStatus)(FT_HANDLE ftHandle, DWORD *dwRxBytes);
typedef FT_STATUS(WINAPI *t_FT_SetEventNotification)(FT_HANDLE ftHandle, DWORD Mask, PVOID Param);
typedef FT_STATUS(WINAPI *t_FT_GetStatus)(FT_HANDLE ftHandle, DWORD *dwRxBytes, DWORD *dwTxBytes, DWORD *dwEventDWord);
typedef FT_STATUS(WINAPI *t_FT_SetBreakOn)(FT_HANDLE ftHandle);
typedef FT_STATUS(WINAPI *t_FT_SetBreakOff)(FT_HANDLE ftHandle);
typedef FT_STATUS(WINAPI *t_FT_SetWaitMask)(FT_HANDLE ftHandle, DWORD Mask);
typedef FT_STATUS(WINAPI *t_FT_WaitOnMask)(FT_HANDLE ftHandle, DWORD *Mask);
typedef FT_STATUS(WINAPI *t_FT_GetEventStatus)(FT_HANDLE ftHandle, DWORD *dwEventDWord);
typedef FT_STATUS(WINAPI *t_FT_ReadEE)(FT_HANDLE ftHandle, DWORD dwWordOffset, LPWORD lpwValue);
typedef FT_STATUS(WINAPI *t_FT_WriteEE)(FT_HANDLE ftHandle, DWORD dwWordOffset, WORD wValue);
typedef FT_STATUS(WINAPI *t_FT_EraseEE)(FT_HANDLE ftHandle);
typedef FT_STATUS(WINAPI *t_FT_EE_Program)(FT_HANDLE ftHandle, PFT_PROGRAM_DATA pData);
typedef FT_STATUS(WINAPI *t_FT_EE_ProgramEx)(FT_HANDLE ftHandle, PFT_PROGRAM_DATA pData, char *Manufacturer, char *ManufacturerId, char *Description, char *SerialNumber);
typedef FT_STATUS(WINAPI *t_FT_EE_Read)(FT_HANDLE ftHandle, PFT_PROGRAM_DATA pData);
typedef FT_STATUS(WINAPI *t_FT_EE_ReadEx)(FT_HANDLE ftHandle, PFT_PROGRAM_DATA pData, char *Manufacturer, char *ManufacturerId, char *Description, char *SerialNumber);
typedef FT_STATUS(WINAPI *t_FT_EE_UASize)(FT_HANDLE ftHandle, LPDWORD lpdwSize);
typedef FT_STATUS(WINAPI *t_FT_EE_UAWrite)(FT_HANDLE ftHandle, PUCHAR pucData, DWORD dwDataLen);
typedef FT_STATUS(WINAPI *t_FT_EE_UARead)(FT_HANDLE ftHandle, PUCHAR pucData, DWORD dwDataLen, LPDWORD lpdwBytesRead);
typedef FT_STATUS(WINAPI *t_FT_EEPROM_Read)(FT_HANDLE ftHandle, void *eepromData, DWORD eepromDataSize, char *Manufacturer, char *ManufacturerId, char *Description, char *SerialNumber);
typedef FT_STATUS(WINAPI *t_FT_EEPROM_Program)(FT_HANDLE ftHandle, void *eepromData, DWORD eepromDataSize, char *Manufacturer, char *ManufacturerId, char *Description, char *SerialNumber);
typedef FT_STATUS(WINAPI *t_FT_SetLatencyTimer)(FT_HANDLE ftHandle, UCHAR ucLatency);
typedef FT_STATUS(WINAPI *t_FT_GetLatencyTimer)(FT_HANDLE ftHandle, PUCHAR pucLatency);
typedef FT_STATUS(WINAPI *t_FT_SetBitMode)(FT_HANDLE ftHandle, UCHAR ucMask, UCHAR ucEnable);
typedef FT_STATUS(WINAPI *t_FT_GetBitMode)(FT_HANDLE ftHandle, PUCHAR pucMode);
typedef FT_STATUS(WINAPI *t_FT_SetUSBParameters)(FT_HANDLE ftHandle, ULONG ulInTransferSize, ULONG ulOutTransferSize);
typedef FT_STATUS(WINAPI *t_FT_SetDeadmanTimeout)(FT_HANDLE ftHandle, ULONG ulDeadmanTimeout);
typedef FT_STATUS(WINAPI *t_FT_GetDeviceInfo)(FT_HANDLE ftHandle, FT_DEVICE *lpftDevice, LPDWORD lpdwID, PCHAR SerialNumber, PCHAR Description, LPVOID Dummy);
typedef FT_STATUS(WINAPI *t_FT_StopInTask)(FT_HANDLE ftHandle);
typedef FT_STATUS(WINAPI *t_FT_RestartInTask)(FT_HANDLE ftHandle);
typedef FT_STATUS(WINAPI *t_FT_SetResetPipeRetryCount)(FT_HANDLE ftHandle, DWORD dwCount);
typedef FT_STATUS(WINAPI *t_FT_ResetPort)(FT_HANDLE ftHandle);
typedef FT_STATUS(WINAPI *t_FT_CyclePort)(FT_HANDLE ftHandle);
typedef FT_HANDLE(WINAPI *t_FT_W32_CreateFile)(LPCTSTR lpszName, DWORD dwAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreate, DWORD dwAttrsAndFlags, HANDLE hTemplate);
typedef BOOL(WINAPI *t_FT_W32_CloseHandle)(FT_HANDLE ftHandle);
typedef BOOL(WINAPI *t_FT_W32_ReadFile)(FT_HANDLE ftHandle, LPVOID lpBuffer, DWORD nBufferSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped);
typedef BOOL(WINAPI *t_FT_W32_WriteFile)(FT_HANDLE ftHandle, LPVOID lpBuffer, DWORD nBufferSize, LPDWORD lpBytesWritten, LPOVERLAPPED lpOverlapped);
typedef DWORD(WINAPI *t_FT_W32_GetLastError)(FT_HANDLE ftHandle);
typedef BOOL(WINAPI *t_FT_W32_GetOverlappedResult)(FT_HANDLE ftHandle, LPOVERLAPPED lpOverlapped, LPDWORD lpdwBytesTransferred, BOOL bWait);
typedef BOOL(WINAPI *t_FT_W32_CancelIo)(FT_HANDLE ftHandle);
typedef BOOL(WINAPI *t_FT_W32_ClearCommBreak)(FT_HANDLE ftHandle);
typedef BOOL(WINAPI *t_FT_W32_ClearCommError)(FT_HANDLE ftHandle, LPDWORD lpdwErrors, LPFTCOMSTAT lpftComstat);
typedef BOOL(WINAPI *t_FT_W32_EscapeCommFunction)(FT_HANDLE ftHandle, DWORD dwFunc);
typedef BOOL(WINAPI *t_FT_W32_GetCommModemStatus)(FT_HANDLE ftHandle, LPDWORD lpdwModemStatus);
typedef BOOL(WINAPI *t_FT_W32_GetCommState)(FT_HANDLE ftHandle, LPFTDCB lpftDcb);
typedef BOOL(WINAPI *t_FT_W32_GetCommTimeouts)(FT_HANDLE ftHandle, FTTIMEOUTS *pTimeouts);
typedef BOOL(WINAPI *t_FT_W32_PurgeComm)(FT_HANDLE ftHandle, DWORD dwMask);
typedef BOOL(WINAPI *t_FT_W32_SetCommBreak)(FT_HANDLE ftHandle);
typedef BOOL(WINAPI *t_FT_W32_SetCommMask)(FT_HANDLE ftHandle, ULONG ulEventMask);
typedef BOOL(WINAPI *t_FT_W32_GetCommMask)(FT_HANDLE ftHandle, LPDWORD lpdwEventMask);
typedef BOOL(WINAPI *t_FT_W32_SetCommState)(FT_HANDLE ftHandle, LPFTDCB lpftDcb);
typedef BOOL(WINAPI *t_FT_W32_SetCommTimeouts)(FT_HANDLE ftHandle, FTTIMEOUTS *pTimeouts);
typedef BOOL(WINAPI *t_FT_W32_SetupComm)(FT_HANDLE ftHandle, DWORD dwReadBufferSize, DWORD dwWriteBufferSize);
typedef BOOL(WINAPI *t_FT_W32_WaitCommEvent)(FT_HANDLE ftHandle, PULONG pulEvent, LPOVERLAPPED lpOverlapped);
typedef FT_STATUS(WINAPI *t_FT_CreateDeviceInfoList)(LPDWORD lpdwNumDevs);
typedef FT_STATUS(WINAPI *t_FT_GetDeviceInfoList)(FT_DEVICE_LIST_INFO_NODE *pDest, LPDWORD lpdwNumDevs);
typedef FT_STATUS(WINAPI *t_FT_GetDeviceInfoDetail)(DWORD dwIndex, LPDWORD lpdwFlags, LPDWORD lpdwType, LPDWORD lpdwID, LPDWORD lpdwLocId, LPVOID lpSerialNumber, LPVOID lpDescription, FT_HANDLE *pftHandle);
typedef FT_STATUS(WINAPI *t_FT_GetDriverVersion)(FT_HANDLE ftHandle, LPDWORD lpdwVersion);
typedef FT_STATUS(WINAPI *t_FT_GetLibraryVersion)(LPDWORD lpdwVersion);
typedef FT_STATUS(WINAPI *t_FT_Rescan)(void);
typedef FT_STATUS(WINAPI *t_FT_Reload)(WORD wVid, WORD wPid);
typedef FT_STATUS(WINAPI *t_FT_GetComPortNumber)(FT_HANDLE ftHandle, LPLONG	lpdwComPortNumber);
typedef FT_STATUS(WINAPI *t_FT_EE_ReadConfig)(FT_HANDLE ftHandle, UCHAR ucAddress, PUCHAR pucValue);
typedef FT_STATUS(WINAPI *t_FT_EE_WriteConfig)(FT_HANDLE ftHandle, UCHAR ucAddress, UCHAR ucValue);
typedef FT_STATUS(WINAPI *t_FT_EE_ReadECC)(FT_HANDLE ftHandle, UCHAR ucOption, LPWORD lpwValue);
typedef FT_STATUS(WINAPI *t_FT_GetQueueStatusEx)(FT_HANDLE ftHandle, DWORD *dwRxBytes);
typedef FT_STATUS(WINAPI *t_FT_ComPortIdle)(FT_HANDLE ftHandle);
typedef FT_STATUS(WINAPI *t_FT_ComPortCancelIdle)(FT_HANDLE ftHandle);
typedef FT_STATUS(WINAPI *t_FT_VendorCmdGet)(FT_HANDLE ftHandle, UCHAR Request, UCHAR *Buf, USHORT Len);
typedef FT_STATUS(WINAPI *t_FT_VendorCmdSet)(FT_HANDLE ftHandle, UCHAR Request, UCHAR *Buf, USHORT Len);
typedef FT_STATUS(WINAPI *t_FT_VendorCmdGetEx)(FT_HANDLE ftHandle, USHORT wValue, UCHAR *Buf, USHORT Len);
typedef FT_STATUS(WINAPI *t_FT_VendorCmdSetEx)(FT_HANDLE ftHandle, USHORT wValue, UCHAR *Buf, USHORT Len);

struct ftd2xx_functions_t {
  t_FT_Initialize FT_Initialize;
  t_FT_Finalise FT_Finalise;
  t_FT_Open FT_Open;
  t_FT_OpenEx FT_OpenEx;
  t_FT_ListDevices FT_ListDevices;
  t_FT_Close FT_Close;
  t_FT_Read FT_Read;
  t_FT_Write FT_Write;
  t_FT_IoCtl FT_IoCtl;
  t_FT_SetBaudRate FT_SetBaudRate;
  t_FT_SetDivisor FT_SetDivisor;
  t_FT_SetDataCharacteristics FT_SetDataCharacteristics;
  t_FT_SetFlowControl FT_SetFlowControl;
  t_FT_ResetDevice FT_ResetDevice;
  t_FT_SetDtr FT_SetDtr;
  t_FT_ClrDtr FT_ClrDtr;
  t_FT_SetRts FT_SetRts;
  t_FT_ClrRts FT_ClrRts;
  t_FT_GetModemStatus FT_GetModemStatus;
  t_FT_SetChars FT_SetChars;
  t_FT_Purge FT_Purge;
  t_FT_SetTimeouts FT_SetTimeouts;
  t_FT_GetQueueStatus FT_GetQueueStatus;
  t_FT_SetEventNotification FT_SetEventNotification;
  t_FT_GetStatus FT_GetStatus;
  t_FT_SetBreakOn FT_SetBreakOn;
  t_FT_SetBreakOff FT_SetBreakOff;
  t_FT_SetWaitMask FT_SetWaitMask;
  t_FT_WaitOnMask FT_WaitOnMask;
  t_FT_GetEventStatus FT_GetEventStatus;
  t_FT_ReadEE FT_ReadEE;
  t_FT_WriteEE FT_WriteEE;
  t_FT_EraseEE FT_EraseEE;
  t_FT_EE_Program FT_EE_Program;
  t_FT_EE_ProgramEx FT_EE_ProgramEx;
  t_FT_EE_Read FT_EE_Read;
  t_FT_EE_ReadEx FT_EE_ReadEx;
  t_FT_EE_UASize FT_EE_UASize;
  t_FT_EE_UAWrite FT_EE_UAWrite;
  t_FT_EE_UARead FT_EE_UARead;
  t_FT_EEPROM_Read FT_EEPROM_Read;
  t_FT_EEPROM_Program FT_EEPROM_Program;
  t_FT_SetLatencyTimer FT_SetLatencyTimer;
  t_FT_GetLatencyTimer FT_GetLatencyTimer;
  t_FT_SetBitMode FT_SetBitMode;
  t_FT_GetBitMode FT_GetBitMode;
  t_FT_SetUSBParameters FT_SetUSBParameters;
  t_FT_SetDeadmanTimeout FT_SetDeadmanTimeout;
  t_FT_GetDeviceInfo FT_GetDeviceInfo;
  t_FT_StopInTask FT_StopInTask;
  t_FT_RestartInTask FT_RestartInTask;
  t_FT_SetResetPipeRetryCount FT_SetResetPipeRetryCount;
  t_FT_ResetPort FT_ResetPort;
  t_FT_CyclePort FT_CyclePort;
  t_FT_W32_CreateFile FT_W32_CreateFile;
  t_FT_W32_CloseHandle FT_W32_CloseHandle;
  t_FT_W32_ReadFile FT_W32_ReadFile;
  t_FT_W32_WriteFile FT_W32_WriteFile;
  t_FT_W32_GetLastError FT_W32_GetLastError;
  t_FT_W32_GetOverlappedResult FT_W32_GetOverlappedResult;
  t_FT_W32_CancelIo FT_W32_CancelIo;
  t_FT_W32_ClearCommBreak FT_W32_ClearCommBreak;
  t_FT_W32_ClearCommError FT_W32_ClearCommError;
  t_FT_W32_EscapeCommFunction FT_W32_EscapeCommFunction;
  t_FT_W32_GetCommModemStatus FT_W32_GetCommModemStatus;
  t_FT_W32_GetCommState FT_W32_GetCommState;
  t_FT_W32_GetCommTimeouts FT_W32_GetCommTimeouts;
  t_FT_W32_PurgeComm FT_W32_PurgeComm;
  t_FT_W32_SetCommBreak FT_W32_SetCommBreak;
  t_FT_W32_SetCommMask FT_W32_SetCommMask;
  t_FT_W32_GetCommMask FT_W32_GetCommMask;
  t_FT_W32_SetCommState FT_W32_SetCommState;
  t_FT_W32_SetCommTimeouts FT_W32_SetCommTimeouts;
  t_FT_W32_SetupComm FT_W32_SetupComm;
  t_FT_W32_WaitCommEvent FT_W32_WaitCommEvent;
  t_FT_CreateDeviceInfoList FT_CreateDeviceInfoList;
  t_FT_GetDeviceInfoList FT_GetDeviceInfoList;
  t_FT_GetDeviceInfoDetail FT_GetDeviceInfoDetail;
  t_FT_GetDriverVersion FT_GetDriverVersion;
  t_FT_GetLibraryVersion FT_GetLibraryVersion;
  t_FT_Rescan FT_Rescan;
  t_FT_Reload FT_Reload;
  t_FT_GetComPortNumber FT_GetComPortNumber;
  t_FT_EE_ReadConfig FT_EE_ReadConfig;
  t_FT_EE_WriteConfig FT_EE_WriteConfig;
  t_FT_EE_ReadECC FT_EE_ReadECC;
  t_FT_GetQueueStatusEx FT_GetQueueStatusEx;
  t_FT_ComPortIdle FT_ComPortIdle;
  t_FT_ComPortCancelIdle FT_ComPortCancelIdle;
  t_FT_VendorCmdGet FT_VendorCmdGet;
  t_FT_VendorCmdSet FT_VendorCmdSet;
  t_FT_VendorCmdGetEx FT_VendorCmdGetEx;
  t_FT_VendorCmdSetEx FT_VendorCmdSetEx;
};
